@model IEnumerable<Dynamo.Model.LineBalancing.ParticularLineBalancing>
@using Microsoft.AspNetCore.Identity
@inject UserManager<Dynamo.Model.Common.Authentication.ApplicationUser> UserManager

@{
    var user = await UserManager.FindByNameAsync(Context.User.Identity.Name);
}

@{
    ViewData["Title"] = "Line Balancing";
}

@section Css {
    @{await Html.RenderPartialAsync("_DataTablesCssPartial");}
}

@section Sole {
    <style>
        .line-number {
            min-width: 200px;
        }

        .card .table td {
            padding-top: .2rem !important;
            padding-bottom: .2rem !important;
            vertical-align: middle;
        }

        .card .table th {
            text-align: center;
        }
    </style>
}

<div class="header bg-custom pb-6">
    <div class="container-fluid">
        <div class="header-body">
            <div class="row align-items-center py-4">
                <div class="col-lg-6 col-7">
                    <h6 class="h2 text-white d-inline-block mb-0">Line Balancing</h6>
                    <nav aria-label="breadcrumb" class="d-none d-md-inline-block ml-md-4">
                        <ol class="breadcrumb breadcrumb-links breadcrumb-dark">
                            <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
                            <li class="breadcrumb-item active" aria-current="page">Line Balancing</li>
                        </ol>
                    </nav>
                </div>
                @if (await UserManager.IsInRoleAsync(user, "SuperAdmin") || await UserManager.IsInRoleAsync(user, "KSIAdmin") || await UserManager.IsInRoleAsync(user, "YSSADMIN") || await UserManager.IsInRoleAsync(user, "MAFAdmin") || await UserManager.IsInRoleAsync(user, "RFLAdmin") || await UserManager.IsInRoleAsync(user, "APEXAdmin") || await UserManager.IsInRoleAsync(user, "EDISONAdmin") || await UserManager.IsInRoleAsync(user, "KSIUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "YSSUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "MAFUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "RFLUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "APEXUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "EDISONUserOfLineBalancing"))
                {
                    <div class="col-lg-6 col-5 text-right">
                        <a class="btn btn-sm btn-neutral" asp-action="CreateLineBalancing" asp-controller="LineBalancing">New</a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="container-fluid mt--6">
    <div class="row">
        <div class="col">
            <div class="card animated fadeIn overflow-hidden">
                <div class="card-header py-2">
                    <h3 class="mb-0">Lines</h3>
                </div>
                <div class="card-body px-0 pb-2 pt-3">
                    <table class="table align-items-center table-hover table-striped table-bordered" id="datatable-basic2">
                        <thead class="thead-light">
                            <tr>
                                <th>
                                    Line Number
                                </th>
                                <th>
                                    Section
                                </th>
                                <th>
                                    CC-Conception Name
                                </th>
                                <th data-toggle="popover" data-content="Actual Line Balancing Ratio">
                                    Actual LBR
                                </th>
                                <th>
                                    Who
                                </th>
                                <th class="text-center">
                                    Action
                                </th>
                            </tr>
                        </thead>
                        @{var date = DateTime.Now; }
                        <tbody>
                            @foreach (var item in Model)
                            {
                                <tr>
                                    <td class="text-wrap line-number">
                                        <input type="hidden" class="lineId" name="name" value="@item.Id" />
                                        @item.Line.LineNumber
                                    </td>
                                    <td>
                                        @item.Line.Section.Name
                                    </td>
                                    <td>
                                        @item.StandardOperationTime.SotModel.Name
                                    </td>
                                    <td class="text-right">
                                        @if (item.ActualLineBalancingRatio == 0)
                                        {
                                            <label>0 %</label>
                                        }
                                        else
                                        {
                                            var actualLineBalancingRatio = (item.ActualLineBalancingRatio * 100).ToString("#.##");
                                            <label>@actualLineBalancingRatio %</label>
                                        }
                                    </td>
                                    <td>
                                        @item.Who
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group">
                                            <a class="btn btn-primary btn-sm" asp-action="Index" asp-controller="LineBalancing" asp-route-id="@item.Id">Balance Line</a>
                                            @if (await UserManager.IsInRoleAsync(user, "SuperAdmin") || await UserManager.IsInRoleAsync(user, "KSIAdmin") || await UserManager.IsInRoleAsync(user, "YSSADMIN") || await UserManager.IsInRoleAsync(user, "MAFAdmin") || await UserManager.IsInRoleAsync(user, "RFLAdmin") || await UserManager.IsInRoleAsync(user, "APEXAdmin") || await UserManager.IsInRoleAsync(user, "EDISONAdmin") || await UserManager.IsInRoleAsync(user, "KSIUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "YSSUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "MAFUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "RFLUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "APEXUserOfLineBalancing") || await UserManager.IsInRoleAsync(user, "EDISONUserOfLineBalancing"))
                                            {
                                                <a class="btn btn-default btn-sm" asp-action="EditLineBalancing" asp-controller="LineBalancing" asp-route-id="@item.Id">Edit</a>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/vendor/datatables.net/js/jquery.dataTables.min.js" asp-append-version="true"></script>
    <script src="~/vendor/datatables.net-bs4/js/dataTables.bootstrap4.min.js" asp-append-version="true"></script>
    <script src="~/vendor/datatables.net-buttons/js/dataTables.buttons.min.js" asp-append-version="true"></script>
    <script src="~/vendor/datatables.net-select/js/dataTables.select.min.js" asp-append-version="true"></script>
    <script>
        $("#datatable-basic2").DataTable({
            initComplete: function (settings, json) {
                $("table").addClass("border-left-0 border-right-0");
                $(".dt-bootstrap4 > .row:nth-child(2)").addClass("table-responsive-on-hover mx-0");
                $(".dt-bootstrap4 > .row:nth-child(2) > .col-sm-12").addClass("px-0");
            },
            colReorder: {
                allowReorder: !0
            },
            responsive: !0,
            //scrollX: !0,
            order: [],
            language: {
                paginate: {
                    previous: "<i class='fas fa-angle-left'>",
                    next: "<i class='fas fa-angle-right'>",
                }
            },
            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],
            autoWidth: !1,
            stateSave: !0,
            stateDuration: 365 * 60 * 60 * 24,
            stateSaveParams: function (settings, data) {
                delete data.order;
            },
            processing: !0,
            paging: !0,
            columnDefs: [
                { "searchable": false, "targets": [-1,] },
                { "orderable": false, "targets": [-1,] },
            ],
        })
    </script>
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}