// <auto-generated />
using System;
using Dynamo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DecathlonDynamoErpApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200105103820_FactoryIdInSOT")]
    partial class FactoryIdInSOT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dynamo.Model.CICalendar.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDay");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("FromDate");

                    b.Property<string>("StatusColour");

                    b.Property<string>("Title");

                    b.Property<string>("ToDate");

                    b.HasKey("Id");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("Dynamo.Model.CICalendar.EventGuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarEventId");

                    b.Property<int>("Status");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventId");

                    b.ToTable("EventGuests");
                });

            modelBuilder.Entity("Dynamo.Model.Common.Authentication.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f686b56a-6135-4221-a0b0-bdec547e3waw",
                            ConcurrencyStamp = "da9a3b0e-8b6f-8529-71d0-4fd255e23f15",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has All Permissions",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "w585b57b-7456-8222-c0d0-bdec765e3awa",
                            ConcurrencyStamp = "ea9a3b0f-9b5f-7153-81e0-4fd799e23f16",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Maximum Permissions",
                            Name = "MAFAdmin",
                            NormalizedName = "MAFADMIN"
                        },
                        new
                        {
                            Id = "m121b57c-9025-9223-e0f0-bdec765e3bgb",
                            ConcurrencyStamp = "la9a3b0g-8b4f-6218-91e0-4fd366e23f17",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Maximum Permissions",
                            Name = "KSIAdmin",
                            NormalizedName = "KSIADMIN"
                        },
                        new
                        {
                            Id = "m347b57d-8617-9224-g0h0-bdec765e3lml",
                            ConcurrencyStamp = "la9a3b0g-7b3f-8412-11e0-4fd366e23f18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Maximum Permissions",
                            Name = "YSSAdmin",
                            NormalizedName = "YSSADMIN"
                        },
                        new
                        {
                            Id = "m915b57e-2431-9225-i0j0-bdec765e3pgp",
                            ConcurrencyStamp = "la9a3b0g-6b2f-9864-21e0-4fd366e23f19",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Maximum Permissions",
                            Name = "RFLAdmin",
                            NormalizedName = "RFLADMIN"
                        },
                        new
                        {
                            Id = "m173b57f-8519-9226-k0l0-bdec765e3rir",
                            ConcurrencyStamp = "la9a3b0g-5b1f-7852-31e0-4fd366e23f20",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Maximum Permissions",
                            Name = "APEXAdmin",
                            NormalizedName = "APEXADMIN"
                        },
                        new
                        {
                            Id = "m354b57g-4013-9227-m0n0-bdec765e3oeo",
                            ConcurrencyStamp = "la9a3b0g-4b9f-4102-41e0-4fd366e23f21",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Maximum Permissions",
                            Name = "EDISONAdmin",
                            NormalizedName = "EDISONADMIN"
                        },
                        new
                        {
                            Id = "e858c58l-3251-9888-c1d1-bdec765e3pip",
                            ConcurrencyStamp = "ah8b4b9j-3n6o-3491-73e1-4fd800e23g17",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Several Permissions",
                            Name = "MAFUser",
                            NormalizedName = "MAFUSER"
                        },
                        new
                        {
                            Id = "a212b59c-5209-3999-e1f1-bdec785e4lil",
                            ConcurrencyStamp = "eu5a3b0g-9c5g-9126-45e1-4fd366e23i18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Several Permissions",
                            Name = "KSIUser",
                            NormalizedName = "KSIUSER"
                        },
                        new
                        {
                            Id = "g734b69c-9461-6111-g1h1-bdec785e4imi",
                            ConcurrencyStamp = "ri5a3b0g-8d4j-2184-95e1-4fd352e23i19",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Several Permissions",
                            Name = "YSSUser",
                            NormalizedName = "YSSUSER"
                        },
                        new
                        {
                            Id = "z323b59c-5209-5344-i1j1-bdec735e4gpg",
                            ConcurrencyStamp = "al5a3b0g-7c3p-4517-45e1-4fd377e23i20",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Several Permissions",
                            Name = "RFLUser",
                            NormalizedName = "RFLUSER"
                        },
                        new
                        {
                            Id = "x212b59c-3269-1666-k1l1-bdec785e4gig",
                            ConcurrencyStamp = "lq5a3b1g-6c2g-3254-93e1-4fd255e23i18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Several Permissions",
                            Name = "APEXUser",
                            NormalizedName = "APEXUSER"
                        },
                        new
                        {
                            Id = "v212b59c-6348-6121-m1n1-bdec785e4iki",
                            ConcurrencyStamp = "ql5a3b1g-5c2g-6512-81e1-4fd511e23i18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Several Permissions",
                            Name = "EDISONUser",
                            NormalizedName = "EDISONUSER"
                        },
                        new
                        {
                            Id = "e858c58l-1212-4222-c2d2-bdec131e3pbp",
                            ConcurrencyStamp = "ah8b4b9j-3n6o-3491-73e1-4fd800e23g17",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "MAFViewer",
                            NormalizedName = "MAFVIEWER"
                        },
                        new
                        {
                            Id = "a212b59c-3434-4333-e2f2-bdec132e4lbl",
                            ConcurrencyStamp = "eu5a3b0g-9c5g-9126-45e1-4fd366e23i18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "KSIViewer",
                            NormalizedName = "KSIVIEWER"
                        },
                        new
                        {
                            Id = "g734b69c-5656-4555-g2h2-bdec133e4ibi",
                            ConcurrencyStamp = "ri5a3b0g-8d4j-2184-95e1-4fd352e23i19",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "YSSViewer",
                            NormalizedName = "YSSVIEWER"
                        },
                        new
                        {
                            Id = "z323b59c-7878-4666-i2j2-bdec134e4gbg",
                            ConcurrencyStamp = "al5a3b0g-7c3p-4517-45e1-4fd377e23i20",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "RFLViewer",
                            NormalizedName = "RFLVIEWER"
                        },
                        new
                        {
                            Id = "x212b59c-9191-4777-k2l2-bdec135e4gbg",
                            ConcurrencyStamp = "lq5a3b1g-6c2g-3254-93e1-4fd255e23i18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "APEXViewer",
                            NormalizedName = "APEXVIEWER"
                        },
                        new
                        {
                            Id = "v212b59c-3113-4888-m2n2-bdec136e4ibi",
                            ConcurrencyStamp = "ql5a3b1g-5c2g-6512-81e1-4fd511e23i18",
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Has Minimum Permissions",
                            Name = "EDISONViewer",
                            NormalizedName = "EDISONVIEWER"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Common.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FactoryId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8ab6ee62-f36c-48b6-ae27-dbb22cbfb507",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26d21881-0a3a-44ab-aa4d-10664ace1e2d",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5TDMS5CNA2GYJK2URB4GDOCQI2NI7EHJ",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "1891b070-42ce-40ad-9c4e-5a47f81dc0ad",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "504dcd7c-cfdc-49ec-a455-7397cbfcccdc",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 1,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMINKSI",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MHNEMETEQV4TNCQ3YRP7WC5X74GNV7HI",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminKSI"
                        },
                        new
                        {
                            Id = "133a8219-f819-45a8-b9b5-e7c4ddad8b7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bee968a-9516-4e3c-9fad-b6d7234d4550",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 2,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMINYSS",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WSZPQ45KPNK6QHM5RTUM6OXJAV46LW4P",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminYSS"
                        },
                        new
                        {
                            Id = "8lh7oo83-f918-45a8-b9b5-e7c4ddad8b7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3lqq352a-7534-4e3c-9fbc-b6d7234d4660",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 3,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMINMAF",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "FRPOV99KPNK6QHM5IUUM6OXJAV32LW4Q",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminMAF"
                        },
                        new
                        {
                            Id = "8231b097-f123-45a8-b9b5-e7c4ddad8b7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ioo142a-2145-4e3c-9fmb-b6d7234d4770",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 4,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMINRFL",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "LKTIC77KPNK6Q54FLRUM6OXJAV14LW4W",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminRFL"
                        },
                        new
                        {
                            Id = "8fg9ww95-f792-45a8-b9b5-e7c4ddad8b7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fjj357a-8632-4e3c-9flk-b6d7234d4880",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 5,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMINAPEX",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VJRSO58KPNK5RCP5JRUM6OXJAV49LW4E",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminAPEX"
                        },
                        new
                        {
                            Id = "7846b041-f643-45a8-b9b5-e7c4ddad8b7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3zaz461a-2136-4e3c-9fpo-b6d7234d4990",
                            Email = "monir.hossain@decathlon.com",
                            EmailConfirmed = false,
                            FactoryId = 6,
                            LockoutEnabled = false,
                            NormalizedEmail = "MONIR.HOSSAIN@DECATHLON.COM",
                            NormalizedUserName = "SUPERADMINEDISON",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO6XuvdZ4p/fzatnYaxaH4psRTnOEp3N+Ez6FFxAh1S76HPtt/YScM8RIguweFeoQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JWERP12KPNK6QHM5JRUM6OXJAV85LW4R",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdminEDISON"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Common.CssClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CssClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "ToogleSideMenuClass"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            Name = "Sidebar Radius"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Name = "Dark Navigation"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = false,
                            Name = "Light Background"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = false,
                            Name = "Dark Mode"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead");

                    b.Property<string>("Message");

                    b.Property<string>("SentBy");

                    b.Property<string>("SentByUserName");

                    b.Property<string>("SentTo");

                    b.Property<string>("SentToUserName");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdderId");

                    b.Property<string>("LinkAction");

                    b.Property<string>("LinkController");

                    b.Property<int>("NotificationTypeId");

                    b.Property<DateTime>("PostingTime");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.NotificationApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRead");

                    b.Property<int>("NotificationId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.NotificationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("NotificationGroups");
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chat"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Event"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.ELearnings.ELearning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfUpload");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ELearningFileName1");

                    b.Property<string>("ELearningFileName2");

                    b.Property<int>("FactoryId");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("ELearnings");
                });

            modelBuilder.Entity("Dynamo.Model.Factories.Factory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Factories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Chittagong",
                            Name = "KSI",
                            PhoneNumber = "A-001"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Chittagong",
                            Name = "YSS",
                            PhoneNumber = "A-002"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Chittagong",
                            Name = "MAF",
                            PhoneNumber = "A-003"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Chittagong",
                            Name = "RFL",
                            PhoneNumber = "A-004"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Chittagong",
                            Name = "APEX",
                            PhoneNumber = "A-005"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Chittagong",
                            Name = "EDISON",
                            PhoneNumber = "A-006"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Factories.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LineNumber")
                        .IsRequired();

                    b.Property<int?>("SectionId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Dynamo.Model.Factories.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProcessId");

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.AchievedValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncentiveVariableId");

                    b.Property<int>("LineIncentiveId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LineIncentiveId");

                    b.ToTable("AchievedValues");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.IncentiveVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("IncentiveVariables");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.LineIncentive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<bool>("Enable");

                    b.Property<int>("LineId");

                    b.Property<DateTime>("LineIncentiveDateTime");

                    b.Property<double?>("Total");

                    b.HasKey("Id");

                    b.HasIndex("LineId")
                        .IsUnique();

                    b.ToTable("LineIncentives");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.MonthlySectionEarningPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("MoneyPerPoint");

                    b.Property<int>("Month");

                    b.Property<int>("SectionId");

                    b.Property<double>("TargetPoint");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("MonthlySectionEarningPoints");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.MonthlyVariableValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncentiveVariableId");

                    b.Property<int>("Month");

                    b.Property<int>("SectionId");

                    b.Property<double>("Value");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("IncentiveVariableId");

                    b.HasIndex("SectionId");

                    b.ToTable("MonthlyVariableValues");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.PointValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncentiveVariableId");

                    b.Property<int>("LineIncentiveId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LineIncentiveId");

                    b.ToTable("PointValues");
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.TargetValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IncentiveVariableId");

                    b.Property<int>("LineIncentiveId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LineIncentiveId");

                    b.ToTable("TargetValues");
                });

            modelBuilder.Entity("Dynamo.Model.LineBalancing.LineBalancingState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AllocatedTime1");

                    b.Property<double?>("AllocatedTime2");

                    b.Property<double?>("AllocatedTime3");

                    b.Property<double?>("AllocatedTime4");

                    b.Property<double?>("CycleTime1");

                    b.Property<double?>("CycleTime2");

                    b.Property<double?>("CycleTime3");

                    b.Property<double?>("CycleTime4");

                    b.Property<int>("MachineId");

                    b.Property<int>("OperationId");

                    b.Property<string>("OperationName");

                    b.Property<int?>("OperatorId1");

                    b.Property<int?>("OperatorId2");

                    b.Property<int?>("OperatorId3");

                    b.Property<int?>("OperatorId4");

                    b.Property<int?>("OperatorNo1");

                    b.Property<int?>("OperatorNo2");

                    b.Property<int?>("OperatorNo3");

                    b.Property<int?>("OperatorNo4");

                    b.Property<double?>("Output1");

                    b.Property<double?>("Output2");

                    b.Property<double?>("Output3");

                    b.Property<double?>("Output4");

                    b.Property<int>("ParticularLineBalancingId");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("OperationId");

                    b.HasIndex("ParticularLineBalancingId");

                    b.ToTable("LineBalancingStates");
                });

            modelBuilder.Entity("Dynamo.Model.LineBalancing.ParticularLineBalancing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ActualLineBalancingRatio");

                    b.Property<int?>("LineId");

                    b.Property<int?>("StandardOperationTimeId");

                    b.Property<string>("Who");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("StandardOperationTimeId");

                    b.ToTable("ParticularLineBalancings");
                });

            modelBuilder.Entity("Dynamo.Model.Machines.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("BasicTiredness");

                    b.Property<double?>("ChangeBobin");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<double?>("Field1");

                    b.Property<double?>("Field2");

                    b.Property<double?>("Field3");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double?>("NoiseyEnvironment");

                    b.Property<double?>("Other");

                    b.Property<double?>("Physiology");

                    b.Property<double?>("StandWorking");

                    b.Property<double?>("Total");

                    b.HasKey("Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("Dynamo.Model.Operations.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MachineId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("SectionId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Dynamo.Model.Operations.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("IdCardNumber")
                        .IsRequired();

                    b.Property<DateTime>("JoiningDate");

                    b.Property<int?>("LineId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<int>("SectionId");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("SectionId");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("Dynamo.Model.Skills.SkillMatrix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OperationId");

                    b.Property<int>("OperatorId");

                    b.Property<double>("RftScore");

                    b.Property<double>("SotScore");

                    b.Property<double>("StandardRft");

                    b.Property<double>("StandardSotInSecond");

                    b.Property<string>("TargetGrade")
                        .IsRequired();

                    b.Property<double?>("TargetMonth")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("OperatorId");

                    b.ToTable("SkillMatrixs");
                });

            modelBuilder.Entity("Dynamo.Model.Skills.SkillMatrixRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<int>("FactoryId");

                    b.Property<string>("Level");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("SkillMatrixRanges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 3,
                            Code = 3,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 4,
                            Code = 4,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 5,
                            Code = 5,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 6,
                            Code = 1,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 7,
                            Code = 2,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 8,
                            Code = 3,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 9,
                            Code = 4,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 10,
                            Code = 5,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 11,
                            Code = 1,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 12,
                            Code = 2,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 13,
                            Code = 3,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 14,
                            Code = 4,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 15,
                            Code = 5,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 16,
                            Code = 1,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 17,
                            Code = 2,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 18,
                            Code = 3,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 19,
                            Code = 4,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 20,
                            Code = 5,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 21,
                            Code = 1,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 22,
                            Code = 2,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 23,
                            Code = 3,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 24,
                            Code = 4,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 25,
                            Code = 5,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 26,
                            Code = 1,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 27,
                            Code = 2,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 28,
                            Code = 3,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 29,
                            Code = 4,
                            FactoryId = 1,
                            Level = ""
                        },
                        new
                        {
                            Id = 30,
                            Code = 5,
                            FactoryId = 1,
                            Level = ""
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Sot.CalculationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CalculationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Not Done"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Done"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Progress"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Sot.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CalculationFileName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DataSources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CalculationFileName = "STOPWATCH/VIDEO",
                            Name = "Supplier Vdo"
                        },
                        new
                        {
                            Id = 2,
                            CalculationFileName = "PACE",
                            Name = "Sam Pace"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.Sot.ManualJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("ManualJobs");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.ManualJobStandardOperationTimeItem", b =>
                {
                    b.Property<int>("StandardOperationTimeItemId");

                    b.Property<int>("ManualJobId");

                    b.Property<int>("Quantity");

                    b.Property<double>("Time");

                    b.HasKey("StandardOperationTimeItemId", "ManualJobId");

                    b.HasIndex("ManualJobId");

                    b.ToTable("ManualJobStandardOperationTimeItems");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details");

                    b.Property<int>("FactoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.SectionStandardOperationTime", b =>
                {
                    b.Property<int>("StandardOperationTimeId");

                    b.Property<int>("SectionId");

                    b.Property<double>("SotValue");

                    b.HasKey("StandardOperationTimeId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionStandardOperationTimes");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.SignSport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FactoryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("SignSports");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.SotModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dipl");

                    b.Property<int>("FactoryId");

                    b.Property<string>("Name");

                    b.Property<string>("Photo");

                    b.Property<int>("ProcessId");

                    b.Property<int>("SignSportId");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("SignSportId");

                    b.ToTable("SotModels");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.StandardOperationTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalculationStatusId");

                    b.Property<int>("FactoryId");

                    b.Property<int>("SotModelId");

                    b.Property<int?>("ValidationStatusId");

                    b.HasKey("Id");

                    b.HasIndex("CalculationStatusId");

                    b.HasIndex("FactoryId");

                    b.HasIndex("SotModelId");

                    b.HasIndex("ValidationStatusId");

                    b.ToTable("StandardOperationTimes");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.StandardOperationTimeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cycle");

                    b.Property<double?>("CycleTime");

                    b.Property<int>("DataSourceId");

                    b.Property<string>("OperationCode");

                    b.Property<int>("OperationId");

                    b.Property<double?>("Rating");

                    b.Property<int>("SectionId");

                    b.Property<int?>("SerialNumber");

                    b.Property<double?>("Size");

                    b.Property<double?>("SotValue");

                    b.Property<int>("StandardOperationTimeId");

                    b.Property<string>("VideoLink");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("OperationId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StandardOperationTimeId");

                    b.ToTable("StandardOperationTimeItems");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.StandardOperationTimeSubItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CycleEndTime");

                    b.Property<double?>("CycleStartTime");

                    b.Property<bool>("IsNeglected");

                    b.Property<int>("StandardOperationTimeItemId");

                    b.Property<double?>("Wastage1EndTime");

                    b.Property<double?>("Wastage1StartTime");

                    b.Property<double?>("Wastage2EndTime");

                    b.Property<double?>("Wastage2StartTime");

                    b.Property<double?>("Wastage3EndTime");

                    b.Property<double?>("Wastage3StartTime");

                    b.HasKey("Id");

                    b.HasIndex("StandardOperationTimeItemId");

                    b.ToTable("StandardOperationTimeSubItems");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.ValidationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ValidationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Validated"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Not Validated"
                        },
                        new
                        {
                            Id = 3,
                            Name = "In Progress"
                        });
                });

            modelBuilder.Entity("Dynamo.Model.TPSProjects.TPSProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfUpload");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("FactoryId");

                    b.Property<string>("ProjectFileName1");

                    b.Property<string>("ProjectFileName2");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("TPSProjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8ab6ee62-f36c-48b6-ae27-dbb22cbfb507",
                            RoleId = "f686b56a-6135-4221-a0b0-bdec547e3waw"
                        },
                        new
                        {
                            UserId = "1891b070-42ce-40ad-9c4e-5a47f81dc0ad",
                            RoleId = "m121b57c-9025-9223-e0f0-bdec765e3bgb"
                        },
                        new
                        {
                            UserId = "133a8219-f819-45a8-b9b5-e7c4ddad8b7c",
                            RoleId = "m347b57d-8617-9224-g0h0-bdec765e3lml"
                        },
                        new
                        {
                            UserId = "8lh7oo83-f918-45a8-b9b5-e7c4ddad8b7c",
                            RoleId = "w585b57b-7456-8222-c0d0-bdec765e3awa"
                        },
                        new
                        {
                            UserId = "8231b097-f123-45a8-b9b5-e7c4ddad8b7c",
                            RoleId = "m915b57e-2431-9225-i0j0-bdec765e3pgp"
                        },
                        new
                        {
                            UserId = "8fg9ww95-f792-45a8-b9b5-e7c4ddad8b7c",
                            RoleId = "m173b57f-8519-9226-k0l0-bdec765e3rir"
                        },
                        new
                        {
                            UserId = "7846b041-f643-45a8-b9b5-e7c4ddad8b7c",
                            RoleId = "m354b57g-4013-9227-m0n0-bdec765e3oeo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dynamo.Model.CICalendar.EventGuest", b =>
                {
                    b.HasOne("Dynamo.Model.CICalendar.CalendarEvent")
                        .WithMany("EventGuests")
                        .HasForeignKey("CalendarEventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Common.Authentication.ApplicationUser", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.Notification", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Infrastructure.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.NotificationApplicationUser", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Infrastructure.Notification", "Notification")
                        .WithMany("NotificationApplicationUsers")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Common.Infrastructure.NotificationGroup", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Infrastructure.Group", "Group")
                        .WithMany("NotificationGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.ELearnings.ELearning", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("ELearnings")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Factories.Line", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany("Lines")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Factories.Section", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("Sections")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.Process", "Process")
                        .WithMany("Sections")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.AchievedValue", b =>
                {
                    b.HasOne("Dynamo.Model.Incentives.LineIncentive", "LineIncentive")
                        .WithMany()
                        .HasForeignKey("LineIncentiveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.LineIncentive", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Line", "Line")
                        .WithOne("LineIncentive")
                        .HasForeignKey("Dynamo.Model.Incentives.LineIncentive", "LineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.MonthlySectionEarningPoint", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.MonthlyVariableValue", b =>
                {
                    b.HasOne("Dynamo.Model.Incentives.IncentiveVariable", "IncentiveVariable")
                        .WithMany()
                        .HasForeignKey("IncentiveVariableId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.PointValue", b =>
                {
                    b.HasOne("Dynamo.Model.Incentives.LineIncentive", "LineIncentive")
                        .WithMany()
                        .HasForeignKey("LineIncentiveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Incentives.TargetValue", b =>
                {
                    b.HasOne("Dynamo.Model.Incentives.LineIncentive", "LineIncentive")
                        .WithMany()
                        .HasForeignKey("LineIncentiveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.LineBalancing.LineBalancingState", b =>
                {
                    b.HasOne("Dynamo.Model.Machines.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.LineBalancing.ParticularLineBalancing", "ParticularLineBalancing")
                        .WithMany()
                        .HasForeignKey("ParticularLineBalancingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.LineBalancing.ParticularLineBalancing", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Line", "Line")
                        .WithMany("ParticularLineBalancings")
                        .HasForeignKey("LineId");

                    b.HasOne("Dynamo.Model.Sot.StandardOperationTime", "StandardOperationTime")
                        .WithMany("ParticularLineBalancings")
                        .HasForeignKey("StandardOperationTimeId");
                });

            modelBuilder.Entity("Dynamo.Model.Operations.Operation", b =>
                {
                    b.HasOne("Dynamo.Model.Machines.Machine", "Machine")
                        .WithMany("Operations")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany("Operations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Operations.Operator", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Line", "Line")
                        .WithMany("Operators")
                        .HasForeignKey("LineId");

                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany("Operators")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Skills.SkillMatrix", b =>
                {
                    b.HasOne("Dynamo.Model.Operations.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Operations.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Skills.SkillMatrixRange", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("SkillMatrixRanges")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.ManualJob", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("ManualJobs")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.ManualJobStandardOperationTimeItem", b =>
                {
                    b.HasOne("Dynamo.Model.Sot.ManualJob", "ManualJob")
                        .WithMany("ManualJobStandardOperationTimeItems")
                        .HasForeignKey("ManualJobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.StandardOperationTimeItem", "StandardOperationTimeItem")
                        .WithMany("ManualJobStandardOperationTimeItems")
                        .HasForeignKey("StandardOperationTimeItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.Process", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("Processes")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.SectionStandardOperationTime", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany("SectionStandardOperationTimes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.StandardOperationTime", "StandardOperationTime")
                        .WithMany("SectionStandardOperationTimes")
                        .HasForeignKey("StandardOperationTimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.SignSport", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("SignSports")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.SotModel", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("SotModels")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.Process", "Process")
                        .WithMany("SotModels")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.SignSport", "SignSport")
                        .WithMany("SotModels")
                        .HasForeignKey("SignSportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.StandardOperationTime", b =>
                {
                    b.HasOne("Dynamo.Model.Sot.CalculationStatus", "CalculationStatus")
                        .WithMany("StandardOperationTimes")
                        .HasForeignKey("CalculationStatusId");

                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("StandardOperationTimes")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.SotModel", "SotModel")
                        .WithMany("StandardOperationTimes")
                        .HasForeignKey("SotModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.ValidationStatus", "ValidationStatus")
                        .WithMany("StandardOperationTimes")
                        .HasForeignKey("ValidationStatusId");
                });

            modelBuilder.Entity("Dynamo.Model.Sot.StandardOperationTimeItem", b =>
                {
                    b.HasOne("Dynamo.Model.Sot.DataSource", "DataSource")
                        .WithMany("StandardOperationTimeItems")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Operations.Operation", "Operation")
                        .WithMany("StandardOperationTimeItems")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Factories.Section", "Section")
                        .WithMany("StandardOperationTimeItems")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Sot.StandardOperationTime", "StandardOperationTime")
                        .WithMany("StandardOperationTimeItems")
                        .HasForeignKey("StandardOperationTimeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.Sot.StandardOperationTimeSubItem", b =>
                {
                    b.HasOne("Dynamo.Model.Sot.StandardOperationTimeItem", "StandardOperationTimeItem")
                        .WithMany("StandardOperationTimeSubItems")
                        .HasForeignKey("StandardOperationTimeItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Dynamo.Model.TPSProjects.TPSProject", b =>
                {
                    b.HasOne("Dynamo.Model.Factories.Factory", "Factory")
                        .WithMany("TPSProjects")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Authentication.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Authentication.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Dynamo.Model.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dynamo.Model.Common.Authentication.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
